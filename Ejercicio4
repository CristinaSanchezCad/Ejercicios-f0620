package examen.ejercicio4;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import examen.ejercicio3.Color;
import examen.ejercicio3.Electrodomestico;
import examen.ejercicio3.Frigorifico;
import examen.ejercicio3.Lavadora;
import examen.ejercicio3.Televisor;

public class Ejercicio4 {

	public static void main(String[] args) {
		List<Electrodomestico> electrodomesticos = new ArrayList<>();
		electrodomesticos.add(new Televisor(435, Color.NEGRO, 'D', 5, 43, Televisor.DVBT2));
		electrodomesticos.add(new Lavadora(650, 42));
		electrodomesticos.add(new Frigorifico(700, 57));
		electrodomesticos.add(new Lavadora(350, 37));
		Collections.sort(electrodomesticos);
		guardarFicheroTexto(electrodomesticos);
		Collections.sort(electrodomesticos, Collections.reverseOrder(new ElectrodomesticosComparator()));
		guardarFicheroBinario(electrodomesticos);
	}

	static void guardarFicheroTexto(List<Electrodomestico> electrodomesticos) {
		try (PrintWriter out = new PrintWriter(
				new OutputStreamWriter(new FileOutputStream("res/electrodomésticos.txt"), "utf8"))) {
			electrodomesticos.forEach(e -> out.println(e));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	static void guardarFicheroBinario(List<Electrodomestico> electrodomesticos) {
		try (ObjectOutputStream out = new ObjectOutputStream(
				new BufferedOutputStream(new FileOutputStream("res/electrodomésticos.bin")))) {
			for (Electrodomestico e: electrodomesticos)
				out.writeObject(e);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}


/* Ejercicio 4 (2 puntos)
Define una clase que ponga a prueba en el método main las clases definidas en el ejercicio anterior realizando las acciones siguientes:

Almacenar en un mismo ArrayList electrodomésticos de todos los tipos.
Ordenar el ArrayList con el método sort(List<T> list) de la clase Collections.
Almacenar en un fichero de texto el contenido del ArrayList ordenado a razón de un electrodoméstico por línea. Por cada electrodoméstico se almacenará en la línea correspondiente lo que retorne el método toString.
Ordenar el ArrayList con el método sort(List<T> list, Comparator<? super T> c) de la clase Collections, utilizando como criterio de ordenación el consumo energético de mayor consumo a menor consumo y dentro de los que tienen igual consumo, el precio de mayor a menor.
Almacenar en un fichero binario el ArrayList resultado de la ordenación del punto anterior. El almacenamiento en el fichero se realizará serializando de forma independiente cada uno de los electrodomésticos almacenados en el ArrayList. */
